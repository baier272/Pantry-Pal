# 带数量的新鲜易耗食材

# p_name 是一个字符串
# freshfood[p_name] 是一个子字典

#加载
import pickle
import os

# 字段初始值
changes = {}


#定义功能

#保存变量的同名数据文件
def saveit(vir,name):
    filename = name + ".data"
    f = open(filename, 'wb')
    pickle.dump(vir, f)
    f.close()
    print("\n✅ 已储存到 "+name+".data")


def initialize(valuename):
    filename = valuename + ".data"
    f = open(filename, "wb")
    if valuename == "freshfood":
        freshfood = {}
        #freshfood = {'vegetables': {'青椒': 3, '菠菜': 1, '生菜': 1}, 'protein': {'豆腐': 2, '豆豉鲮鱼': 1}, 'carbon': {'土豆': 4, '红薯': 5}, 'complex': {'鸿禧菇': 2, '金针菇': 1}, 'fruits': {'香蕉': 3,  '橙子': 1}}
        fb = open("freshfood.data", 'wb')
        pickle.dump(freshfood, fb)  # 存入总字典文件
        print("\n✅ 已初始化 freshfood.data")
    elif valuename == "danger":
        danger = {}
        #danger = {"香蕉":2,"豆腐":1}
        fb = open("danger.data", 'wb')
        pickle.dump(danger, fb)  # 存入快到期食材
        print("\n✅ 已初始化 danger.data")
    fb.close()


#读取数据文件，并生成临时变量 tempdata
def readdata(valuename):
    filename =  valuename + ".data"
    if os.path.exists(filename):
        f = open(filename, "rb")
        tempdata = pickle.load(f)
        return tempdata
    else:
        print("\n❗️ no such file:", filename)
        initialize(valuename)
        f = open(filename, "rb")
        tempdata = pickle.load(f)
        return tempdata


#打印字典(old)
# def print_dict(d):
#     print("----------------------------\n以下是",d, "的列表\n----------------------------")
#     for k,v in sorted(freshfood[d].items()):
#         if v > 0:
#             #print("🔘", k,"\t",v)
#             tplt = "{0:<2}{1:{3}<8}\t{2:<3}"
#             print(tplt.format("🔘", k, str(v), chr(12288)))
#         else :
#             tplt = "{0:<2}{1:{3}<8}\t{2:<3}"
#             print(tplt.format("🚫", k, str(v), chr(12288)))
#     return d


#打印字典(new)
def print_dict(p_name):
    print("-----------------------------------\n以下是", p_name, "的列表\n-----------------------------------")
    newlist = list()
    for food, count in freshfood[p_name].items():
        newlist.append((count, food))
    newlist.sort(reverse=True)
    for count, food in newlist:
        if count == 0:
            tplt = "{0:<2}{1:{3}<8}\t{2:<3}"
            print(tplt.format("🚫", food, str(count), chr(12288)))
        elif count < 99:
            tplt = "{0:<2}{1:{3}<8}\t{2:<3}"
            print(tplt.format("🔘", food, str(count), chr(12288)))
        else:
            tplt = "{0:<2}{1:{3}<8}\t{2:<3}"
            print(tplt.format("・", food, str(count), chr(12288)))


#展示带序号的字典key，并生成临时新列表tempix
def dicttols(ordir):
    tempix = list()
    for ls in ordir.keys():
        tempix.append(ls)
        print(tempix.index(ls) + 1, ls)
    return tempix

#展示带序号的字典key，并生成临时新列表排序后的tempix
# def dicttols2(ordir):
#     tempix = list()
#     st=list()
#     for k,v in ordir.items():
#         st.append((v,k))
#     st.sort(reverse=True)
#     # print(st)
#     for ls in st:
#         tempix.append(ls[1])
#         print(tempix.index(ls[1]) + 1, ls[1],ls[0])
#     return tempix

#展示带序号的字典key，并生成临时新列表排序后的tempix，升级带图标
def dicttols3(ordir):
    tempix = list()
    st = list()
    for k, v in ordir.items():
        st.append((v, k))
    st.sort(reverse=True)
    #print(st)
    for ls in st:
        tempix.append(ls[1])
        if ls[0] == 0:
            tplt = "{0:<2}{1:<4}{2:{4}<8}\t{3:<3}"
            print(tplt.format("🚫", str(tempix.index(ls[1]) + 1), ls[1], str(ls[0]), chr(12288)))
        else:
            tplt = "{0:<2}{1:<4}{2:{4}<8}\t{3:<3}"
            print(tplt.format("🔘", str(tempix.index(ls[1]) + 1), ls[1], str(ls[0]), chr(12288)))
    return tempix

#从新生成的列表中，用名称或序号选择出key名称：name
def askch(tempix):
    ch = input(" \n请选择项目或输入（回车退出）：")
    if len(ch)==0:
        print("未输入")
    try:
        name = tempix[int(ch) - 1]
    except:
        name = ch
    return name

#确认功能（确认后直接保存文件）
def check(p_name,ck,food,wehave_before,wehave_after):
    if len(ck) <1:
        freshfood[p_name][food] = wehave_after
        print("✔️ 已完成修改")
        changes[food] = changes.get(food,0) + wehave_after - wehave_before
        saveit(freshfood,"freshfood")
    elif ck == "n":
        freshfood[p_name][food] = wehave_before
        print("🌀️ 已撤销")
    elif ck == "d":
        dekey(freshfood[p_name], food)
        print("✔️✔️ 已删除该食材")
        changes[food] = "删除"
        saveit(freshfood,"freshfood")
    else:
        freshfood[p_name][food] = wehave_before
        print("🌀️ 已撤销")
    return ck


#向分类字典中添加食材,并保存
def addfood(p_name,food,n):
    wehave_before = freshfood[p_name].get(food, 0)
    print("之前:",food,wehave_before)
    wehave_after = wehave_before + n
    print("💬 🟢 即将添加：",food,n)
    ck = input("🔔 确定修改？（回车:是；n:否；d:删除食材):")
    check(p_name,ck,food,wehave_before,wehave_after)
    if ck == "1":
        print("💬 添加后：",food,freshfood[p_name][food])
    return freshfood

##向分类字典中减少食材,并保存
def redufood(p_name,food,n):
    wehave_before = freshfood[p_name].get(food, 0)
    print("之前：", food,wehave_before)
    wehave_after = wehave_before - n
    if wehave_after < 0:
        wehave_after = 0
    print("💬 🔻 即将减少：", food, n)
    ck = input("🔔 确定修改？（回车:是；n:否；d:删除食材):")
    check(p_name,ck,food, wehave_before, wehave_after)
    if ck == "1":
        print("💬 减少后：",food,freshfood[p_name][food])
    return freshfood

#删除字典中的key功能
def dekey(d,key):
    if key in d:
        del d[key]
        return d

# 用字典生成全部元素(有库存的）的大字典:allfood
def getallitems(var):
    allfood = {} #新建临时食材列表
    for cate,foods in var.items():
        for k,v in foods.items():
            if v > 0 :
                allfood[k] = v
            else:continue
    return allfood

#本次修改情况
def thistime():
    print("\n_____本次修改情况_____")
    for food,count in changes.items():
        print(food,count)


print("\n\n🧅 🥬 🥕 🍅 🥚 🍗 🥩 我是新鲜食材精 🧅 🥬 🥕 🍅 🥚 🍗 🥩 ")
#读freshfood文件

freshfood = readdata("freshfood")

#读取danger数据
danger = readdata("danger")

# 生成全部食材大字典
allfood = getallitems(freshfood)

#删除已经没有的危险食品

for food in list(danger.keys()):
    if food not in allfood or allfood[food]==0:
        dekey(danger,food)
        print("🗑 已自动删除没有的危险食品：",food)
        print("\n💬 已调整危险食材")
        saveit(danger,"danger")

#调整危险食材数量
for food,count in list(danger.items()):
    danger[food]=allfood[food]
print("\n💬 已调整危险食材")
saveit(danger,"danger")
print("\n________________________________________________________________________")

while True:
    # 读freshfood文件
    freshfood = readdata("freshfood")
    print("\n 1:📥 添加; 2:🗑 减少; 3:🔎 查询; 4:⚠️ 危险食材; 5：👋🏼 退出")
    ch = input("\n请输入指令:")
    try:
        ch = int(ch)
    except:
        print("❗️ 请输入数字序号")
        continue
    if ch == 1:
        print("\n————————————————\n开始选择类别")
        tempix = dicttols(freshfood) #展示大字典列表
        p_name = askch(tempix) #选择类别名称
        if len(p_name) == 0 :
            print("❗️ 未选择类别，中断。")
            continue
        freshfood[p_name] = freshfood.get(p_name,dict()) #如果没有列表就建立一个分类
        while True:
            tempix = dicttols3(freshfood[p_name])  # 展示小类别内物品列表
            print("————————————————\n 🟢 添加食材")
            food = askch(tempix)  # 选择并生成食材名称
            if len(food) == 0:
                print("❗️ 未输入食材名称，跳出。")
                break
            if food in freshfood[p_name]:
                print("现有:", food, freshfood[p_name][food])
            n = input("输入添加 "+ food+" 的数量：")  # 输入增加数量
            try:
                n = int(n)
                freshfood = addfood(p_name, food, n)
            except:
                print("未输入数量，中断。")
                break
    elif ch == 2:
        print("\n————————————————\n开始选择类别")
        tempix = dicttols(freshfood) #展示大字典列表
        p_name = askch(tempix) #选择类别名称
        if p_name not in freshfood:
            print("❗️ 无此列表")
            continue
        while True:
            # 展示小类别内物品列表
            tempix = dicttols3(freshfood[p_name])
            # tempix = list()
            # for ls in freshfood[p_name].keys():
            #     tempix.append(ls)
            #     if freshfood[p_name][ls] == 0:
            #         tplt = "{0:<2}{1:<4}{2:{4}<8}\t{3:<3}"
            #         print(tplt.format("🚫", str(tempix.index(ls)+1),ls, str(freshfood[p_name][ls]), chr(12288)))
            #     else:
            #         tplt = "{0:<2}{1:<4}{2:{4}<8}\t{3:<3}"
            #         print(tplt.format("🔘", str(tempix.index(ls)+1),ls, str(freshfood[p_name][ls]), chr(12288)))
            print("————————————————\n 🔻 开始减少食材")
            food = askch(tempix)  # 选择并生成食材名称
            if len(food) == 0:
                print("❗️ 未输入，中断")
                break
            print("现有:", food, freshfood[p_name][food])
            n = input("输入移除"+ food+"的数量(⏎ ：移除全部）： ")  # 输入移除数量
            if len(n) == 0 :
                n = freshfood[p_name][food]
            try:
                n = int(n)
            except:
                print("❗️ 未输入数量，中断。")
                break
            freshfood = redufood(p_name,food,n)
    elif ch == 3:
        ch = input("请输入指令（回车：查看全部；其他任意键：分类查看）：")
        if len(ch) == 0 :
            for p_name in freshfood.keys():
                print_dict(p_name)
        else:
            while True:
                tempix = dicttols(freshfood)
                p_name = askch(tempix)  # 选择类别名称
                if p_name in freshfood.keys():
                    print_dict(p_name)
                else:
                    print("❗️ 无此列表，中断")
                    break
    elif ch == 4:
        #生成最新全部食材大字典
        allfood = getallitems(freshfood)
        #展示
        print("\n⚠️ 危险食材：\n______________")
        newlist = list()
        for food, count in danger.items():
            newlist.append((count, food))
        newlist.sort(reverse=True)
        for count, food in newlist:
            if count < 99:
                tplt = "{0:<2}{1:{3}<8}\t{2:<3}"
                print(tplt.format("🔘", food, str(count), chr(12288)))
            else:
                tplt = "{0:<2}{1:{3}<8}\t{2:<3}"
                print(tplt.format("・", food, str(count), chr(12288)))
        # for (food, count) in danger.items():
        #     print(food, count)
        ch = input("______________\n请输入指令（1：添加危险食材；2：删除危险食材）：")
        try:
            ch = int(ch)
        except:
            print("❗️ 指令错误，请输入数字序号")
            continue
        if ch == 1:  #执行添加食材循环
            while True:
                print("\n开始添加危险食材\n______________")
                tempix = dicttols3(allfood)
                food = askch(tempix)
                if len(food) == 0:
                    print("❗️ 未输入，中断")
                    break
                else:
                    if food not in allfood.keys() or allfood[food] == 0:
                        print("❗️该食材不在现有食材列表中，或已用完！")
                        continue
                    if food in allfood.keys():
                        danger[food] = allfood[food]
                        print("✔️  已添加危险食品：", food)
                        saveit(danger, "danger")  # 储存文件

        elif ch == 2:         #进入删除食材循环
            while True:
                print("\n开始删除危险食材\n______________\n现有危险食材\n______________")
                tempix = dicttols3(danger)
                food = askch(tempix)
                if food in allfood.keys():
                    dekey(danger, food)
                    print("✔️  已删除危险食品：", food)
                    saveit(danger, "danger")  # 储存文件
                else:
                    print("❗️ 无此食材，中断")
                    break
        else:
            print("❗️ 指令错误，请输入指令序号，中断")
            continue
    elif ch == 5:
        thistime()
        print("Bye")
        quit()
    else:
        print("❗️ 请输入序号")
        continue
